name: 'SemVer Tagger'
description: 'Tags the current commit generating a valid (and reasonable) Semantic Versioning 2.0 version based on Conventional Commits specification'
inputs:
  github_token:
    description: 'GitHub token for pushing tags'
    required: true
  ignore_patterns:
    description: 'Pipe-separated list of file patterns to ignore when calculating version bump'
    required: false
    default: '\.md$|\.txt$|^test/|^manual/|\.clt|\.github|\.patterns|\.yml|\.gitignore'
  conventional_commits_authors:
    description: 'Comma-separated list of commit authors whose commits should be analyzed following strict Conventional Commits rules'
    required: false
    default: ''
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'
outputs:
  version:
    description: 'The new version tag created by the action'
    value: ${{ steps.calculate-version.outputs.version }}
  version_full:
    description: 'Full version string including branch and commit information'
    value: ${{ steps.calculate-version.outputs.version_full }}
  version_rpm:
    description: 'Full version string including branch and commit information for RPM'
    value: ${{ steps.calculate-version.outputs.version_rpm }}
  version_deb:
    description: 'Full version string including branch and commit information for DEB'
    value: ${{ steps.calculate-version.outputs.version_deb }}
  version_updated:
    description: 'Indicates whether the version was updated (true/false)'
    value: ${{ steps.calculate-version.outputs.version_updated }}
  target:
    description: 'Build target - release or dev depending on presence of release tag'
    value: ${{ steps.calculate-version.outputs.target }}

runs:
  using: "composite"
  steps:
    - name: Calculate and push new version tag
      id: calculate-version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        IGNORE_PATTERNS: ${{ inputs.ignore_patterns }}
        DEBUG: ${{ inputs.debug }}
        CONVENTIONAL_COMMITS_AUTHORS: ${{ inputs.conventional_commits_authors }}
      run: |
        # Color settings
        # Check if colors should be disabled (NO_COLOR env var is common standard)
        # Also check if output is to a terminal that supports color
        if [ -n "$NO_COLOR" ] || [ -n "$CI" ] || ! [ -t 1 ]; then
            # No color mode
            USE_COLOR=false
        else
            USE_COLOR=true
        fi

        # Define colors or empty strings based on color support
        if [ "$USE_COLOR" = true ]; then
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            BLUE='\033[0;34m'
            RED='\033[0;31m'
            CYAN='\033[0;36m'
            MAGENTA='\033[0;35m'
            BOLD='\033[1m'
            NC='\033[0m' # No Color
        else
            GREEN=''
            YELLOW=''
            BLUE=''
            RED=''
            CYAN=''
            MAGENTA=''
            BOLD=''
            NC=''
        fi

        # Function to safely print with or without escape sequences
        # This helps with echo -e compatibility across different systems
        safe_echo() {
            if [ "$USE_COLOR" = true ]; then
                echo -e "$@"
            else
                # When colors are disabled, use regular echo to avoid issues with -e in some environments
                echo "$@"
            fi
        }

        # Function to print section headers
        print_header() {
            safe_echo "${BLUE}=== $1 ===${NC}"
        }

        # Function to print info messages
        print_info() {
            safe_echo "${GREEN}INFO:${NC} $1"
        }

        # Function to print warning messages
        print_warning() {
            safe_echo "${YELLOW}WARNING:${NC} $1"
        }

        # Function to print debug messages (only if DEBUG is true)
        print_debug() {
            if [ "$DEBUG" = true ]; then
                safe_echo "${CYAN}DEBUG:${NC} $1"
            fi
        }

        # Function to print error messages
        print_error() {
            safe_echo "${RED}ERROR:${NC} $1" >&2
        }

        # Function to highlight version increment messages
        print_increment() {
            safe_echo "${MAGENTA}${BOLD}INCREMENT:${NC} $1"
        }

        # Function to display a list of files with indentation
        print_file_list() {
            if [ "$DEBUG" = true ]; then
                if [ -z "$1" ]; then
                    print_debug "No files changed"
                    return
                fi
                
                print_debug "Changed files:"
                echo "$1" | while IFS= read -r file; do
                    # Check if the file matches ignore patterns
                    if [ -n "$IGNORE_PATTERNS" ] && [[ "$file" =~ ($IGNORE_PATTERNS) ]]; then
                        safe_echo "  ${CYAN}  ➜ $file${NC} ${YELLOW}(ignored)${NC}"
                    else
                        safe_echo "  ${CYAN}  ➜ $file${NC}"
                    fi
                done
            fi
        }

        # Function to print result information
        print_result() {
            safe_echo "${GREEN}=== RESULT ===${NC}"
            safe_echo "${GREEN}Version:${NC}      $1"
            safe_echo "${GREEN}Full Version:${NC} $2"
            safe_echo "${GREEN}RPM Version:${NC}  $3"
            safe_echo "${GREEN}DEB Version:${NC}  $4"
            safe_echo "${GREEN}Target:${NC}       $5"
        }

        # Function to create git tag for current version
        create_version_tag() {
            local tag="$1"
            local commit="$2"
            
            # Create tag
            print_info "Creating tag $tag for commit $commit"
            git tag "$tag" "$commit"
            
            # Add tag to the list of created tags
            CREATED_TAGS+=("$tag")
            print_debug "Added tag $tag to CREATED_TAGS array (current size: ${#CREATED_TAGS[@]})"
        }

        # Function to push all created tags at once
        push_all_tags() {
            if [ ${#CREATED_TAGS[@]} -eq 0 ]; then
                print_info "No new tags to push"
                return
            fi

            # Only push if we have GitHub credentials
            if [ -n "$GITHUB_ACTOR" -a -n "$GITHUB_REPOSITORY" -a -n "$GITHUB_TOKEN" ]; then
                print_info "Pushing ${#CREATED_TAGS[@]} new tags to remote"
                
                # Join tags with commas for display
                local tags_str=$(IFS=, ; echo "${CREATED_TAGS[*]}")
                print_info "Tags to push: $tags_str"
                
                # Try to push all tags
                git push origin ${CREATED_TAGS[@]} || {
                    print_warning "Failed to push some tags, checking if the latest tag was pushed"
                }

                # Get the latest tag (last in the array)
                local latest_tag="${CREATED_TAGS[-1]}"
                
                # Check if the latest tag exists remotely
                if ! git ls-remote --tags origin "$latest_tag" | grep -q "$latest_tag"; then
                    print_error "The latest tag ($latest_tag) is not present in the remote repository. Please check if the provided token has sufficient permissions."
                    exit 1
                else
                    print_info "The latest tag ($latest_tag) is present in the remote repository"
                fi
            else
                print_warning "Not a GitHub Actions environment, skipping tag push"
            fi
        }

        # Set GITHUB_REPOSITORY if not set
        if [ -z "$GITHUB_REPOSITORY" ]; then
            # Try to determine repository from git remote
            GITHUB_REPOSITORY=$(git remote -v | grep -m 1 -o 'github.com[:/]\([^/]\+/[^/]\+\)' | sed 's/github.com[:\/]//')
            # If still not set, use a default
            if [ -z "$GITHUB_REPOSITORY" ]; then
                GITHUB_REPOSITORY="manticoresoftware/manticoresearch"
            fi
        fi
        print_info "Using repository: $GITHUB_REPOSITORY"

        # Enable case-insensitive matching
        shopt -s nocasematch

        # Function to fetch details from GitHub issue or pull request
        fetch_github_details() {
            local url_or_issue="$1"
            local repo="${GITHUB_REPOSITORY}"  # Automatically use the current repository
            local token="$GITHUB_TOKEN"  # Ensure this environment variable is set

            # Determine if the input is a full URL or an issue number
            if [[ "$url_or_issue" =~ ^https://github\.com/ ]]; then
                # Extract the repo from URL if provided
                repo_from_url=$(echo "$url_or_issue" | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|')
                # Extract the issue/PR number from the URL
                issue_number=$(echo "$url_or_issue" | grep -oE '[0-9]+' | head -n 1)
                # Always use the issues endpoint
                api_url="https://api.github.com/repos/${repo_from_url}/issues/${issue_number}"
            else
                # If just an issue number is provided (e.g., #123), use the current repository
                api_url="https://api.github.com/repos/$repo/issues/${url_or_issue/#\#/}"
            fi

            print_debug "Fetching details from: $api_url" >&2

            # Fetch details using GitHub API
            response=$(curl -s -H "Authorization: token $token" "$api_url")

            # Check for errors
            if [[ $(echo "$response" | jq -r '.message // empty') == "Not Found" ]]; then
                echo "{\"type\": \"unknown\", \"label\": \"\"}"
                return
            fi

            # Extract type and label from the response
            issue_type="unknown"
            if [[ $(echo "$response" | jq -r '.pull_request // empty') != "" ]]; then
                issue_type="pull_request"
            elif [[ $(echo "$response" | jq -r '.url // empty') == *"/issues/"* ]]; then
                issue_type="issue"
            fi

            # Look for specific labels or types
            labels=$(echo "$response" | jq -r '.labels[]?.name' 2>/dev/null || echo "")
            label=""
            
            # Check for bug/feature in labels
            if [[ "$labels" == *"bug"* ]]; then
                print_debug "Found 'bug' in labels" >&2
                label="bug"
            elif [[ "$labels" == *"feature"* ]]; then
                print_debug "Found 'feature' in labels" >&2
                label="feature"
            fi

            # If no label found, check if type field exists and extract its name
            if [[ -z "$label" ]]; then
                type_field=$(echo "$response" | jq -r '.type.name // empty' 2>/dev/null)
                print_debug "Type field: '$type_field'" >&2

                if [[ -n "$type_field" ]]; then
                    # Case-insensitive match for Bug/Feature
                    if [[ "$type_field" =~ [Bb][Uu][Gg] ]]; then
                        print_debug "Found 'Bug' in type field" >&2
                        label="bug"
                    elif [[ "$type_field" =~ [Ff][Ee][Aa][Tt][Uu][Rr][Ee] ]]; then
                        print_debug "Found 'Feature' in type field" >&2
                        label="feature"
                    fi
                fi
            fi

            # Return type and label as a JSON object
            result="{\"type\": \"$issue_type\", \"label\": \"$label\"}"
            print_debug "Returning result: $result" >&2
            echo "$result"
        }

        # Function to check if commit follows conventional commits format
        is_conventional_commit() {
            local message="$1"
            local pattern="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([a-z0-9-]+\))?!?:[[:space:]]"
            # Check for conventional commit format: type(scope): description
            # or type(scope)!: description for breaking changes
            if [[ "$message" =~ $pattern ]]; then
                return 0
            fi
            return 1
        }

        # Function to check if author should use conventional commits
        should_use_conventional_commits() {
            local author="$1"
            if [ -z "$CONVENTIONAL_COMMITS_AUTHORS" ]; then
                return 1
            fi
            # Convert comma-separated list to array
            IFS=',' read -ra AUTHORS <<< "$CONVENTIONAL_COMMITS_AUTHORS"
            for a in "${AUTHORS[@]}"; do
                if [[ "$author" == *"$a"* ]]; then
                    return 0
                fi
            done
            return 1
        }

        # Function to analyze commit message for version bump
        analyze_commit_message() {
            local commit_message="$1"
            local commit_author="$2"
            local version_incremented=0
            local old_version="${MAJOR}.${MINOR}.${PATCH}"

            # 1. Validate conventional commits format if author is in the list
            if should_use_conventional_commits "$commit_author"; then
                print_debug "Author $commit_author is in conventional commits list, applying strict rules"
                if ! is_conventional_commit "$commit_message"; then
                    print_warning "Commit does not follow conventional commits format, skipping version bump"
                    return 1
                fi
            fi

            # 2. Check for breaking changes (highest priority)
            local breaking_pattern="^(\w+)(\([^)]+\))?!:"
            if [[ "$commit_message" =~ $breaking_pattern || "$commit_message" =~ BREAKING[[:space:]]+CHANGE: ]]; then
                print_info "Found breaking change in commit message"
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                print_increment "Found breaking change! Incrementing MAJOR version to $MAJOR.$MINOR.$PATCH"
                version_incremented=1
                CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                return 0
            fi

            # 3. Check for explicit version change
            if [[ "$commit_message" =~ [Vv]ersion[[:space:]]+from[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+)[[:space:]]+to[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                old_ver="${BASH_REMATCH[1]}"
                new_ver="${BASH_REMATCH[2]}"
                print_info "Found explicit version change from $old_ver to $new_ver"
                
                # Parse old and new versions
                IFS='.' read -r old_major old_minor old_patch <<< "$old_ver"
                IFS='.' read -r new_major new_minor new_patch <<< "$new_ver"
                
                # Determine what component changed
                if [ "$new_major" -gt "$old_major" ]; then
                    print_info "MAJOR version increment detected"
                    MAJOR=$((MAJOR + 1))
                    MINOR=0
                    PATCH=0
                    version_incremented=1
                    print_increment "Incrementing MAJOR version to $MAJOR.$MINOR.$PATCH based on commit message"
                elif [ "$new_minor" -gt "$old_minor" ]; then
                    print_info "MINOR version increment detected"
                    MINOR=$((MINOR + 1))
                    PATCH=0
                    version_incremented=1
                    print_increment "Incrementing MINOR version to $MAJOR.$MINOR.$PATCH based on commit message"
                elif [ "$new_patch" -gt "$old_patch" ]; then
                    print_info "PATCH version increment detected"
                    PATCH=$((PATCH + 1))
                    version_incremented=1
                    print_increment "Incrementing PATCH version to $MAJOR.$MINOR.$PATCH based on commit message"
                else
                    print_warning "Version in commit message doesn't indicate an increment"
                fi

                if [ $version_incremented -eq 1 ]; then
                    CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                    return 0
                fi
            fi

            # 4. Check commit message patterns (conventional and legacy)
            # First check conventional format
            if [[ "$commit_message" =~ ^feat[[:space:]]*\([[:alnum:]-]+\):[[:space:]] ]] || [[ "$commit_message" =~ ^feat:[[:space:]] ]]; then
                print_info "Found conventional feature commit"
                MINOR=$((MINOR + 1))
                PATCH=0
                version_incremented=1
                print_increment "Found feature commit (conventional). Incrementing MINOR version to $MAJOR.$MINOR.$PATCH"
                CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                return 0
            elif [[ "$commit_message" =~ ^fix[[:space:]]*\([[:alnum:]-]+\):[[:space:]] ]] || [[ "$commit_message" =~ ^fix:[[:space:]] ]]; then
                print_info "Found conventional fix commit"
                PATCH=$((PATCH + 1))
                version_incremented=1
                print_increment "Found bug fix (conventional). Incrementing PATCH version to $MAJOR.$MINOR.$PATCH"
                CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                return 0
            fi

            # Then check legacy format
            if [[ "$commit_message" =~ feature: || "$commit_message" =~ ^feature ]]; then
                print_info "Found legacy feature commit"
                MINOR=$((MINOR + 1))
                PATCH=0
                version_incremented=1
                print_increment "Found feature commit (legacy). Incrementing MINOR version to $MAJOR.$MINOR.$PATCH"
                CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                return 0
            elif [[ "$commit_message" =~ fix ]]; then
                print_info "Found legacy fix commit"
                PATCH=$((PATCH + 1))
                version_incremented=1
                print_increment "Found bug fix (legacy). Incrementing PATCH version to $MAJOR.$MINOR.$PATCH"
                CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                return 0
            fi

            # 5. Check GitHub references (lowest priority)
            url_or_issue=$(echo "$commit_message" | grep -oE 'https://github\.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+(/[a-zA-Z0-9._/-]+)?' | head -n 1)
            if [[ -n "$url_or_issue" ]]; then
                print_info "Found issue reference: $url_or_issue"
                
                # Fetch issue or PR details using GitHub API
                details=$(fetch_github_details "$url_or_issue")
                type=$(echo "$details" | jq -r '.type')
                label=$(echo "$details" | jq -r '.label')
                
                print_info "Issue details - type: $type, label: $label"

                # Prioritize PR over issue
                if [[ "$type" == "pull_request" ]]; then
                    if [[ "$label" == "feature" ]]; then
                        print_info "Found feature PR"
                        MINOR=$((MINOR + 1))
                        PATCH=0
                        version_incremented=1
                        print_increment "Found feature PR. Incrementing MINOR version to $MAJOR.$MINOR.$PATCH"
                        CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                        return 0
                    elif [[ "$label" == "bug" ]]; then
                        print_info "Found bug PR"
                        PATCH=$((PATCH + 1))
                        version_incremented=1
                        print_increment "Found bug PR. Incrementing PATCH version to $MAJOR.$MINOR.$PATCH"
                        CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                        return 0
                    else
                        print_warning "PR has no relevant label (feature/bug)"
                    fi
                elif [[ "$type" == "issue" ]]; then
                    if [[ "$label" == "feature" ]]; then
                        print_info "Found feature issue"
                        MINOR=$((MINOR + 1))
                        PATCH=0
                        version_incremented=1
                        print_increment "Found feature issue. Incrementing MINOR version to $MAJOR.$MINOR.$PATCH"
                        CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                        return 0
                    elif [[ "$label" == "bug" ]]; then
                        print_info "Found bug issue"
                        PATCH=$((PATCH + 1))
                        version_incremented=1
                        print_increment "Found bug issue. Incrementing PATCH version to $MAJOR.$MINOR.$PATCH"
                        CURRENT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                        return 0
                    else
                        print_warning "Issue has no relevant label (feature/bug)"
                    fi
                else
                    print_warning "Unknown reference type: $type"
                fi
            fi

            # No version bump if no rules matched
            print_warning "No version bump rules matched for this commit"
            return 1
        }

        print_header "FETCHING TAGS"
        # git fetch --tags

        # Get all tags that match the pattern
        MATCHING_TAGS=$(git tag -l "[0-9]*.[0-9]*.[0-9]*")
        print_debug "All tags: $(git tag -l)"
        print_debug "Matching tags: $MATCHING_TAGS"

        # Check if there are any matching tags
        if [ -n "$MATCHING_TAGS" ]; then
            # Get the latest semver tag
            LATEST_TAG=$(echo "$MATCHING_TAGS" | sort -V | tail -1)
        fi
        print_info "Latest tag: $LATEST_TAG"

        # Get commit hashes since the latest tag (or all commits if no tag exists)
        if [ -z "$LATEST_TAG" ]; then
            COMMIT_HASHES=$(git log --reverse --format="%H")
            LATEST_TAG="0.0.0"
            print_info "No existing version tags found, starting from 0.0.0"
        else
            COMMIT_HASHES=$(git log --reverse ${LATEST_TAG}..HEAD --format="%H")
        fi

        # Check if current commit has a release tag
        HAS_RELEASE_TAG=$(git tag --points-at HEAD | grep -E '^release' || true)
        print_debug "Has release tag: $HAS_RELEASE_TAG"

        # Set target based on release tag presence
        if [ -n "$HAS_RELEASE_TAG" ]; then
            TARGET="release"
            echo "target=release" >> "$GITHUB_OUTPUT"
        else
            TARGET="dev"
            echo "target=dev" >> "$GITHUB_OUTPUT"
        fi
        print_info "Build target: $TARGET"

        # Skip if no commits found
        if [ -z "$COMMIT_HASHES" ]; then
            print_warning "No new commits found since $LATEST_TAG"
            
            # Check if current commit has a tag
            CURRENT_COMMIT_TAGS=$(git tag --points-at HEAD)
            if [ -n "$CURRENT_COMMIT_TAGS" ]; then
                print_info "Current commit already has tags: $CURRENT_COMMIT_TAGS"
                
                # Get current commit hash (first 8 chars)
                COMMIT_HASH=$(git rev-parse --short=8 HEAD)
                
                # Get timestamp from the commit
                TIMESTAMP=$(git log -1 --format="%cd" --date=format:'%y%m%d%H' HEAD)
                
                # Output version info
                VERSION_FULL="${LATEST_TAG}+${TIMESTAMP}-${COMMIT_HASH}"
                VERSION_RPM=$(echo "$VERSION_FULL" | tr '-' '.')
                VERSION_DEB=$VERSION_FULL
                
                echo "version=$LATEST_TAG" >> "$GITHUB_OUTPUT"
                echo "version_full=$VERSION_FULL" >> "$GITHUB_OUTPUT"
                echo "version_rpm=$VERSION_RPM" >> "$GITHUB_OUTPUT"
                echo "version_deb=$VERSION_DEB" >> "$GITHUB_OUTPUT"
                echo "version_updated=false" >> "$GITHUB_OUTPUT"
                
                print_result "$LATEST_TAG" "$VERSION_FULL" "$VERSION_RPM" "$VERSION_DEB" "$TARGET"
            else
                print_warning "No tags found on current commit, skipping version bump"
                echo "version_updated=false" >> "$GITHUB_OUTPUT"
            fi
            exit 0
        fi

        print_header "ANALYZING COMMITS FOR VERSION BUMP"

        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
        print_debug "Current version components: MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"

        # Default ignore patterns
        IGNORE_PATTERNS="${IGNORE_PATTERNS}"
        print_debug "Ignore patterns: $IGNORE_PATTERNS"

        # Setup git for tag creation if in GitHub Actions
        if [ -n "$GITHUB_ACTOR" -a -n "$GITHUB_REPOSITORY" -a -n "$GITHUB_TOKEN" ]; then
            print_info "Configuring git for GitHub Actions"
            git config --global user.name "$GITHUB_ACTOR"
            git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        else
            print_warning "Not a GitHub Actions environment, skipping git configuration"
        fi

        # Variable to track the current version
        CURRENT_VERSION="$LATEST_TAG"

        # Initialize CREATED_TAGS array
        CREATED_TAGS=()

        # Process each commit
        COMMIT_COUNT=0
        TOTAL_COMMITS=$(echo "$COMMIT_HASHES" | wc -l | tr -d ' ')
        print_info "Found $TOTAL_COMMITS commits to analyze"

        # Variable to track if version was updated
        VERSION_UPDATED=false

        while IFS= read -r commit_hash; do
            COMMIT_COUNT=$((COMMIT_COUNT + 1))
            # Get commit message and author
            commit_message=$(git log -1 --format="%B" $commit_hash)
            commit_author=$(git log -1 --format="%an <%ae>" $commit_hash)
            print_debug "==============================="
            print_debug "Commit message: $commit_message"
            print_debug "Commit author: $commit_author"
            
            # Get changed files for this commit
            changed_files=$(git diff-tree --no-commit-id --name-only -r "$commit_hash")
            
            # Print short commit info
            commit_short=$(git log -1 --format="%h" $commit_hash)
            commit_subject=$(echo "$commit_message" | head -n 1)
            print_info "[$COMMIT_COUNT/$TOTAL_COMMITS] Analyzing commit: $commit_short - $commit_subject - by $commit_author"
            
            # Display changed files if in debug mode
            print_file_list "$changed_files"
            
            # Variables to track if version was incremented
            OLD_VERSION="${MAJOR}.${MINOR}.${PATCH}"

            # Skip if no files were changed (e.g. merge commits)
            if [ -z "$changed_files" ]; then
                print_warning "No files changed in this commit, skipping version bump"
                continue
            fi
            
            # Check if commit touches only ignored files
            all_files_ignored=true
            if [ -z "$IGNORE_PATTERNS" ]; then
                # If IGNORE_PATTERNS is empty, don't ignore any files
                all_files_ignored=false
            else
                while IFS= read -r file; do
                    if [[ ! "$file" =~ ($IGNORE_PATTERNS) ]]; then
                        all_files_ignored=false
                        break
                    fi
                done <<< "$changed_files"
            fi
            
            # Skip version bump if all changed files are ignored
            if [ "$all_files_ignored" = true ]; then
                print_warning "All changed files are ignored, skipping version bump"
                continue
            fi
            
            # Analyze commit message for version bump
            if analyze_commit_message "$commit_message" "$commit_author"; then
                create_version_tag "$CURRENT_VERSION" "$commit_hash"
                VERSION_UPDATED=true
            fi
        done <<< "$COMMIT_HASHES"

        print_header "GENERATING VERSION INFO"

        # Use the current version for output
        NEW_TAG="$CURRENT_VERSION"
        print_info "Final version: $NEW_TAG (started from $LATEST_TAG)"

        # Get current branch name
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        print_debug "Current branch: $BRANCH_NAME"

        # Semver does not allow some symbols that branch may have
        VERSION_SUFFIX=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]//g')

        # Get current commit hash (first 8 chars)
        COMMIT_HASH=$(git rev-parse --short=8 HEAD)

        # Get timestamp from the commit in YYMMDDHH format
        TIMESTAMP=$(git log -1 --format="%cd" --date=format:'%y%m%d%H' HEAD)
            
        # Generate full version string
        if [ -z "$HAS_RELEASE_TAG" ]; then
            if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
                VERSION_FULL="${NEW_TAG}+${TIMESTAMP}-${COMMIT_HASH}-dev"
            else
                VERSION_FULL="${NEW_TAG}+${TIMESTAMP}-${COMMIT_HASH}-${VERSION_SUFFIX}"
            fi
        else
            VERSION_FULL="${NEW_TAG}+${TIMESTAMP}-${COMMIT_HASH}"
        fi

        VERSION_RPM=$(echo "$VERSION_FULL" | tr '-' '.')
        VERSION_DEB=$(echo "$VERSION_FULL")

        # Always write version info to output
        echo "version=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "version_full=$VERSION_FULL" >> "$GITHUB_OUTPUT"
        echo "version_rpm=$VERSION_RPM" >> "$GITHUB_OUTPUT"
        echo "version_deb=$VERSION_DEB" >> "$GITHUB_OUTPUT"
        echo "version_updated=$VERSION_UPDATED" >> "$GITHUB_OUTPUT"

        # Print final results
        print_result "$NEW_TAG" "$VERSION_FULL" "$VERSION_RPM" "$VERSION_DEB" "$TARGET"

        # Push all tags at the end for better efficiency
        push_all_tags


branding:
  icon: git-merge
  color: green
