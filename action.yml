name: 'SemVer Tagger'
description: 'Tags the current commit generating a valid (and reasonable) Semantic Versioning 2.0 version based on Conventional Commits specification'
inputs:
  github_token:
    description: 'GitHub token for pushing tags'
    required: true
  ignore_patterns:
    description: 'Pipe-separated list of file patterns to ignore when calculating version bump'
    required: false
    default: '\.md$|\.txt$|^test/|^manual/|\.clt|\.github|\.patterns|\.yml|\.gitignore'
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'
outputs:
  version:
    description: 'The new version tag created by the action'
    value: ${{ steps.calculate-version.outputs.version }}
  version_full:
    description: 'Full version string including branch and commit information'
    value: ${{ steps.calculate-version.outputs.version_full }}
  version_rpm:
    description: 'Full version string including branch and commit information for RPM'
    value: ${{ steps.calculate-version.outputs.version_rpm }}
  version_deb:
    description: 'Full version string including branch and commit information for DEB'
    value: ${{ steps.calculate-version.outputs.version_deb }}
  target:
    description: 'Build target - release or dev depending on presence of release tag'
    value: ${{ steps.calculate-version.outputs.target }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      env:
        GH_REPOSITORY_REF: ${{ github.head_ref || github.ref }}
      with:
        fetch-depth: 0
        ref: ${{ env.GH_REPOSITORY_REF }}
    - name: Calculate and push new version tag
      id: calculate-version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        IGNORE_PATTERNS: ${{ inputs.ignore_patterns }}
        DEBUG: ${{ inputs.debug }}
      run: |
        # Color settings
        # Check if colors should be disabled (NO_COLOR env var is common standard)
        # Also check if output is to a terminal that supports color
        if [ -n "$NO_COLOR" ] || [ -n "$CI" ] || ! [ -t 1 ]; then
            # No color mode
            USE_COLOR=false
        else
            USE_COLOR=true
        fi

        # Define colors or empty strings based on color support
        if [ "$USE_COLOR" = true ]; then
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            BLUE='\033[0;34m'
            RED='\033[0;31m'
            CYAN='\033[0;36m'
            MAGENTA='\033[0;35m'
            BOLD='\033[1m'
            NC='\033[0m' # No Color
        else
            GREEN=''
            YELLOW=''
            BLUE=''
            RED=''
            CYAN=''
            MAGENTA=''
            BOLD=''
            NC=''
        fi

        # Function to safely print with or without escape sequences
        # This helps with echo -e compatibility across different systems
        safe_echo() {
            if [ "$USE_COLOR" = true ]; then
                echo -e "$@"
            else
                # When colors are disabled, use regular echo to avoid issues with -e in some environments
                echo "$@"
            fi
        }

        # Function to print section headers
        print_header() {
            safe_echo "${BLUE}=== $1 ===${NC}"
        }

        # Function to print info messages
        print_info() {
            safe_echo "${GREEN}INFO:${NC} $1"
        }

        # Function to print warning messages
        print_warning() {
            safe_echo "${YELLOW}WARNING:${NC} $1"
        }

        # Function to print debug messages (only if DEBUG is true)
        print_debug() {
            if [ "$DEBUG" = true ]; then
                safe_echo "${CYAN}DEBUG:${NC} $1"
            fi
        }

        # Function to print error messages
        print_error() {
            safe_echo "${RED}ERROR:${NC} $1" >&2
        }

        # Function to highlight version increment messages
        print_increment() {
            safe_echo "${MAGENTA}${BOLD}INCREMENT:${NC} $1"
        }

        # Function to display a list of files with indentation
        print_file_list() {
            if [ "$DEBUG" = true ]; then
                if [ -z "$1" ]; then
                    print_debug "No files changed"
                    return
                fi
                
                print_debug "Changed files:"
                echo "$1" | while IFS= read -r file; do
                    # Check if the file matches ignore patterns
                    if [ -n "$IGNORE_PATTERNS" ] && [[ "$file" =~ ($IGNORE_PATTERNS) ]]; then
                        safe_echo "  ${CYAN}  ➜ $file${NC} ${YELLOW}(ignored)${NC}"
                    else
                        safe_echo "  ${CYAN}  ➜ $file${NC}"
                    fi
                done
            fi
        }

        # Function to print result information
        print_result() {
            safe_echo "${GREEN}=== RESULT ===${NC}"
            safe_echo "${GREEN}Version:${NC}      $1"
            safe_echo "${GREEN}Full Version:${NC} $2"
            safe_echo "${GREEN}RPM Version:${NC}  $3"
            safe_echo "${GREEN}DEB Version:${NC}  $4"
            safe_echo "${GREEN}Target:${NC}       $5"
        }

        # Function to create git tag for current version
        create_version_tag() {
            local tag="$1"
            local commit="$2"
            
            # Create tag
            print_info "Creating tag $tag for commit $commit"
            git tag "$tag" "$commit"
            
            # Add tag to the list of created tags
            CREATED_TAGS+=("$tag")
        }

        # Function to push all created tags at once
        push_all_tags() {
            if [ ${#CREATED_TAGS[@]} -eq 0 ]; then
                print_info "No new tags to push"
                return
            fi
            
            # Only push if we have GitHub credentials
            if [ -n "$GITHUB_ACTOR" -a -n "$GITHUB_REPOSITORY" -a -n "$GITHUB_TOKEN" ]; then
                print_info "Pushing ${#CREATED_TAGS[@]} new tags to remote"
                
                # Join tags with commas for display
                local tags_str=$(IFS=, ; echo "${CREATED_TAGS[*]}")
                print_info "Tags: $tags_str"
                
                # Push all tags at once
                git push origin ${CREATED_TAGS[@]} || {
                    print_error "Failed to push tags. Please check if the provided token has sufficient permissions."
                }
            fi
        }

        # Set GITHUB_REPOSITORY if not set
        if [ -z "$GITHUB_REPOSITORY" ]; then
            # Try to determine repository from git remote
            GITHUB_REPOSITORY=$(git remote -v | grep -m 1 -o 'github.com[:/]\([^/]\+/[^/]\+\)' | sed 's/github.com[:\/]//')
            # If still not set, use a default
            if [ -z "$GITHUB_REPOSITORY" ]; then
                GITHUB_REPOSITORY="manticoresoftware/manticoresearch"
            fi
        fi
        print_info "Using repository: $GITHUB_REPOSITORY"

        # Enable case-insensitive matching
        shopt -s nocasematch

        # Function to fetch details from GitHub issue or pull request
        fetch_github_details() {
            local url_or_issue="$1"
            local repo="${GITHUB_REPOSITORY}"  # Automatically use the current repository
            local token="$GITHUB_TOKEN"  # Ensure this environment variable is set

            # Determine if the input is a full URL or an issue number
            if [[ "$url_or_issue" =~ ^https://github\.com/ ]]; then
                # Extract the repo from URL if provided
                repo_from_url=$(echo "$url_or_issue" | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|')
                # If the URL contains issue or PR number, use it directly
                if [[ "$url_or_issue" =~ issues/[0-9]+ || "$url_or_issue" =~ pull/[0-9]+ ]]; then
                    api_url="${url_or_issue/github.com/api.github.com/repos}"
                else
                    # Otherwise construct the API URL using the repo from URL
                    api_url="https://api.github.com/repos/${repo_from_url}"
                fi
            else
                # If just an issue number is provided (e.g., #123), use the current repository
                api_url="https://api.github.com/repos/$repo/issues/${url_or_issue/#\#/}"
            fi

            print_debug "Fetching details from: $api_url" >&2

            # Fetch details using GitHub API
            response=$(curl -s -H "Authorization: token $token" "$api_url")

            # Check for errors
            if [[ $(echo "$response" | jq -r '.message // empty') == "Not Found" ]]; then
                echo "{\"type\": \"unknown\", \"label\": \"\"}"
                return
            fi

            # Extract type and label from the response
            issue_type="unknown"
            if [[ $(echo "$response" | jq -r '.pull_request // empty') != "" ]]; then
                issue_type="pull_request"
            elif [[ $(echo "$response" | jq -r '.url // empty') == *"/issues/"* ]]; then
                issue_type="issue"
            fi

            # Look for specific labels or types
            labels=$(echo "$response" | jq -r '.labels[]?.name' 2>/dev/null || echo "")
            label=""
            
            # Check for bug/feature in labels
            if [[ "$labels" == *"bug"* ]]; then
                print_debug "Found 'bug' in labels" >&2
                label="bug"
            elif [[ "$labels" == *"feature"* ]]; then
                print_debug "Found 'feature' in labels" >&2
                label="feature"
            fi

            # If no label found, check if type field exists and extract its name
            if [[ -z "$label" ]]; then
                type_field=$(echo "$response" | jq -r '.type.name // empty' 2>/dev/null)
                print_debug "Type field: '$type_field'" >&2

                if [[ -n "$type_field" ]]; then
                    # Case-insensitive match for Bug/Feature
                    if [[ "$type_field" =~ [Bb][Uu][Gg] ]]; then
                        print_debug "Found 'Bug' in type field" >&2
                        label="bug"
                    elif [[ "$type_field" =~ [Ff][Ee][Aa][Tt][Uu][Rr][Ee] ]]; then
                        print_debug "Found 'Feature' in type field" >&2
                        label="feature"
                    fi
                fi
            fi

            # Return type and label as a JSON object
            result="{\"type\": \"$issue_type\", \"label\": \"$label\"}"
            print_debug "Returning result: $result" >&2
            echo "$result"
        }

        print_header "FETCHING TAGS"
        # git fetch --tags

        # Get all tags that match the pattern
        MATCHING_TAGS=$(git tag -l "[0-9]*.[0-9]*.[0-9]*")
        print_debug "All tags: $(git tag -l)"
        print_debug "Matching tags: $MATCHING_TAGS"

        # Check if there are any matching tags
        if [ -n "$MATCHING_TAGS" ]; then
            # Get the latest semver tag
            LATEST_TAG=$(echo "$MATCHING_TAGS" | sort -V | tail -1)
        fi
        print_info "Latest tag: $LATEST_TAG"

        # Get commit hashes since the latest tag (or all commits if no tag exists)
        if [ -z "$LATEST_TAG" ]; then
            COMMIT_HASHES=$(git log --reverse --format="%H")
            LATEST_TAG="0.0.0"
            print_info "No existing version tags found, starting from 0.0.0"
        else
            COMMIT_HASHES=$(git log --reverse ${LATEST_TAG}..HEAD --format="%H")
        fi

        # Check if current commit has a release tag
        HAS_RELEASE_TAG=$(git tag --points-at HEAD | grep -E '^release' || true)
        print_debug "Has release tag: $HAS_RELEASE_TAG"

        # Set target based on release tag presence
        if [ -n "$HAS_RELEASE_TAG" ]; then
            TARGET="release"
            echo "target=release" >> "$GITHUB_OUTPUT"
        else
            TARGET="dev"
            echo "target=dev" >> "$GITHUB_OUTPUT"
        fi
        print_info "Build target: $TARGET"

        # Skip if no commits found
        if [ -z "$COMMIT_HASHES" ]; then
            print_warning "No new commits found since $LATEST_TAG, skipping version bump"
            
            if [ -n "$HAS_RELEASE_TAG" ]; then
                # Get current commit hash (first 8 chars)
                COMMIT_HASH=$(git rev-parse --short=8 HEAD)
                
                # Get timestamp from the commit
                TIMESTAMP=$(git log -1 --format="%cd" --date=format:'%y%m%d%H' HEAD)
                
                # Output version info for release tag
                VERSION_FULL="${LATEST_TAG}+${TIMESTAMP}-${COMMIT_HASH}"
                VERSION_RPM=$(echo "$VERSION_FULL" | tr '-' '.')
                VERSION_DEB=$VERSION_FULL
                
                echo "version=$LATEST_TAG" >> "$GITHUB_OUTPUT"
                echo "version_full=$VERSION_FULL" >> "$GITHUB_OUTPUT"
                echo "version_rpm=$VERSION_RPM" >> "$GITHUB_OUTPUT"
                echo "version_deb=$VERSION_DEB" >> "$GITHUB_OUTPUT"
                
                print_result "$LATEST_TAG" "$VERSION_FULL" "$VERSION_RPM" "$VERSION_DEB" "$TARGET"
            fi
            exit 0
        fi

        print_header "ANALYZING COMMITS FOR VERSION BUMP"

        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
        print_debug "Current version components: MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"

        # Default ignore patterns
        IGNORE_PATTERNS="${IGNORE_PATTERNS}"
        print_debug "Ignore patterns: $IGNORE_PATTERNS"

        # Setup git for tag creation if in GitHub Actions
        if [ -n "$GITHUB_ACTOR" -a -n "$GITHUB_REPOSITORY" -a -n "$GITHUB_TOKEN" ]; then
            print_info "Configuring git for GitHub Actions"
            git config --global user.name "$GITHUB_ACTOR"
            git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        fi

        # Variable to track the current version
        CURRENT_VERSION="$LATEST_TAG"

        # Array to keep track of created tags
        CREATED_TAGS=()

        # Process each commit
        COMMIT_COUNT=0
        TOTAL_COMMITS=$(echo "$COMMIT_HASHES" | wc -l | tr -d ' ')
        print_info "Found $TOTAL_COMMITS commits to analyze"

        while IFS= read -r commit_hash; do
            COMMIT_COUNT=$((COMMIT_COUNT + 1))
            # Get commit message
            commit_message=$(git log -1 --format="%B" $commit_hash)
            print_debug "Commit message: $commit_message"
            
            # Get changed files for this commit
            changed_files=$(git diff-tree --no-commit-id --name-only -r "$commit_hash")
            
            # Print short commit info
            commit_short=$(git log -1 --format="%h" $commit_hash)
            commit_subject=$(echo "$commit_message" | head -n 1)
            print_info "[$COMMIT_COUNT/$TOTAL_COMMITS] Analyzing commit: $commit_short - $commit_subject"
            
            # Display changed files if in debug mode
            print_file_list "$changed_files"
            
            # Variables to track if version was incremented
            VERSION_INCREMENTED=false
            OLD_VERSION="${MAJOR}.${MINOR}.${PATCH}"

            # Skip if no files were changed (e.g. merge commits)
            if [ -z "$changed_files" ]; then
                print_warning "No files changed in this commit, skipping version bump"
                continue
            fi
            
            # Check if commit touches only ignored files
            all_files_ignored=true
            if [ -z "$IGNORE_PATTERNS" ]; then
                # If IGNORE_PATTERNS is empty, don't ignore any files
                all_files_ignored=false
            else
                while IFS= read -r file; do
                    if [[ ! "$file" =~ ($IGNORE_PATTERNS) ]]; then
                        all_files_ignored=false
                        break
                    fi
                done <<< "$changed_files"
            fi
            
            # Skip version bump if all changed files are ignored
            if [ "$all_files_ignored" = true ]; then
                print_warning "All changed files are ignored, skipping version bump"
                continue
            fi
                        
            # Skip commits with specific prefixes
            SKIP_PREFIX_PATTERN="^(ci|chore|docs|test|build|style)(\([^)]*\))?:[[:space:]]"
            if [[ "$commit_message" =~ $SKIP_PREFIX_PATTERN ]]; then
                print_warning "Skipping commit with prefix: ${BASH_REMATCH[1]}"
                continue
            fi
            
            # Check for explicit version change in commit message
            if [[ "$commit_message" =~ [Vv]ersion[[:space:]]+from[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+)[[:space:]]+to[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                old_ver="${BASH_REMATCH[1]}"
                new_ver="${BASH_REMATCH[2]}"
                print_info "Found explicit version change from $old_ver to $new_ver"
                
                # Parse old and new versions
                IFS='.' read -r old_major old_minor old_patch <<< "$old_ver"
                IFS='.' read -r new_major new_minor new_patch <<< "$new_ver"
                
                # Determine what component changed
                if [ "$new_major" -gt "$old_major" ]; then
                    print_info "MAJOR version increment detected"
                    MAJOR=$((MAJOR + 1))
                    MINOR=0
                    PATCH=0
                    VERSION_INCREMENTED=true
                    print_increment "Incrementing MAJOR version to $MAJOR.$MINOR.$PATCH based on commit message"
                elif [ "$new_minor" -gt "$old_minor" ]; then
                    print_info "MINOR version increment detected"
                    MINOR=$((MINOR + 1))
                    PATCH=0
                    VERSION_INCREMENTED=true
                    print_increment "Incrementing MINOR version to $MAJOR.$MINOR.$PATCH based on commit message"
                elif [ "$new_patch" -gt "$old_patch" ]; then
                    print_info "PATCH version increment detected"
                    PATCH=$((PATCH + 1))
                    VERSION_INCREMENTED=true
                    print_increment "Incrementing PATCH version to $MAJOR.$MINOR.$PATCH based on commit message"
                else
                    print_warning "Version in commit message doesn't indicate an increment"
                fi
            # Check for breaking changes or specific prefixes indicating major changes
            elif [[ "$commit_message" =~ [!] || "$commit_message" =~ breaking ]]; then
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                print_increment "Found breaking change! Incrementing MAJOR version to $MAJOR.$MINOR.$PATCH"
                VERSION_INCREMENTED=true
            # Check for fixes
            elif [[ "$commit_message" =~ fix || "$commit_message" =~ bugfix || "$commit_message" =~ bugfixing || 
                    "$commit_message" =~ fixed || "$commit_message" =~ fixes || "$commit_message" =~ fixing || 
                    "$commit_message" =~ fixup ]]; then
                PATCH=$((PATCH + 1))
                print_increment "Found bug fix. Incrementing PATCH version to $MAJOR.$MINOR.$PATCH"
                VERSION_INCREMENTED=true
            # Check for features in commit message
            elif [[ "$commit_message" =~ feat: || "$commit_message" =~ feature: ]]; then
                MINOR=$((MINOR + 1))
                PATCH=0
                print_increment "Found feature commit. Incrementing MINOR version to $MAJOR.$MINOR.$PATCH"
                VERSION_INCREMENTED=true
            # Attempt to determine change type from issue or pull request
            else
                # Extract URL or issue number
                if [[ "$commit_message" =~ (https://github\.com/[^ ]+|#[0-9]+) ]]; then
                    url_or_issue="${BASH_REMATCH[1]}"
                    print_info "Found issue reference: $url_or_issue"
                    
                    # Fetch issue or PR details using GitHub API
                    details=$(fetch_github_details "$url_or_issue")
                    type=$(echo "$details" | jq -r '.type')
                    label=$(echo "$details" | jq -r '.label')
                    
                    print_info "Issue details - type: $type, label: $label"

                    if [[ "$label" == "feature" ]]; then
                        MINOR=$((MINOR + 1))
                        PATCH=0
                        print_increment "Found feature issue. Incrementing MINOR version to $MAJOR.$MINOR.$PATCH"
                        VERSION_INCREMENTED=true
                    elif [[ "$label" == "bug" ]]; then
                        PATCH=$((PATCH + 1))
                        print_increment "Found bug issue. Incrementing PATCH version to $MAJOR.$MINOR.$PATCH"
                        VERSION_INCREMENTED=true
                    else
                        print_warning "No specific issue type found, not incrementing version"
                    fi
                else
                    print_warning "No issue reference found, not incrementing version"
                fi
            fi
            
            # Create a tag if version was incremented
            if [ "$VERSION_INCREMENTED" = true ]; then
                NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
                    print_increment "Version changed from $OLD_VERSION to $NEW_VERSION"
                    create_version_tag "$NEW_VERSION" "$commit_hash"
                    CURRENT_VERSION="$NEW_VERSION"
                fi
            fi
        done <<< "$COMMIT_HASHES"

        print_header "GENERATING VERSION INFO"

        # Use the current version for output
        NEW_TAG="$CURRENT_VERSION"
        print_info "Final version: $NEW_TAG (started from $LATEST_TAG)"

        # Get current branch name
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        print_debug "Current branch: $BRANCH_NAME"

        # Semver does not allow some symbols that branch may have
        VERSION_SUFFIX=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]//g')

        # Get current commit hash (first 8 chars)
        COMMIT_HASH=$(git rev-parse --short=8 HEAD)

        # Get timestamp from the commit in YYMMDDHH format
        TIMESTAMP=$(git log -1 --format="%cd" --date=format:'%y%m%d%H' HEAD)
            
        # Generate full version string
        if [ -z "$HAS_RELEASE_TAG" ]; then
            if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
                VERSION_FULL="${NEW_TAG}+${TIMESTAMP}-${COMMIT_HASH}-dev"
            else
                VERSION_FULL="${NEW_TAG}+${TIMESTAMP}-${COMMIT_HASH}-${VERSION_SUFFIX}"
            fi
        else
            VERSION_FULL="${NEW_TAG}+${TIMESTAMP}-${COMMIT_HASH}"
        fi

        VERSION_RPM=$(echo "$VERSION_FULL" | tr '-' '.')
        VERSION_DEB=$(echo "$VERSION_FULL")

        # Always write version info to output
        echo "version=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "version_full=$VERSION_FULL" >> "$GITHUB_OUTPUT"
        echo "version_rpm=$VERSION_RPM" >> "$GITHUB_OUTPUT"
        echo "version_deb=$VERSION_DEB" >> "$GITHUB_OUTPUT"

        # Print final results
        print_result "$NEW_TAG" "$VERSION_FULL" "$VERSION_RPM" "$VERSION_DEB" "$TARGET"

        # Push all tags at the end for better efficiency
        push_all_tags


branding:
  icon: git-merge
  color: green
